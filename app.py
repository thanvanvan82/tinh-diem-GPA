import streamlit as st
import pandas as pd
from typing import Dict, List, Tuple
import matplotlib.pyplot as plt
import numpy as np
from fpdf import FPDF
import base64
import tempfile
import os

st.set_page_config(page_title="H·ªá th·ªëng T∆∞ v·∫•n H·ªçc t·∫≠p", page_icon="üéì", layout="wide")

# -----------------------------
# D·ªÆ LI·ªÜU C·∫§U H√åNH & H·∫∞NG S·ªê
# -----------------------------
# N√ÇNG C·∫§P: Nh√∫ng font ch·ªØ Base64 ƒë·ªÉ s·ª≠a l·ªói FileNotFoundError
ROBOTO_FONT_BASE64 = ")
<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')

# -----------------------------
# C√ÅC H√ÄM TI·ªÜN √çCH
# -----------------------------
class PDF(FPDF):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        try:
            # Decode the font from base64 and write to a temporary file
            font_data = base64.b64decode(ROBOTO_FONT_BASE64)
            with tempfile.NamedTemporaryFile(delete=False, suffix=".ttf") as temp_font_file:
                temp_font_file.write(font_data)
                self.font_path = temp_font_file.name
            
            self.add_font('Roboto', '', self.font_path, uni=True)
            self.font_family = 'Roboto'
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i font ch·ªØ cho PDF: {e}. S·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh.")
            self.font_family = 'Arial' # Fallback font

    def __del__(self):
        # Clean up the temporary font file when the object is destroyed
        if hasattr(self, 'font_path') and os.path.exists(self.font_path):
            os.remove(self.font_path)
            
    def header(self): self.set_font(self.font_family, 'B', 16); self.cell(0, 10, 'B√ÅO C√ÅO K·∫æT QU·∫¢ H·ªåC T·∫¨P', 0, 1, 'C'); self.ln(5)
    def footer(self): self.set_y(-15); self.set_font(self.font_family, 'I', 8); self.cell(0, 10, f'Trang {self.page_no()}/{{nb}}', 0, 0, 'C')
    def chapter_title(self, title): self.set_font(self.font_family, 'B', 12); self.cell(0, 10, title, 0, 1, 'L'); self.ln(2)
    def student_info(self, info: Dict):
        self.set_font(self.font_family, '', 11)
        for key, value in info.items():
            self.set_font(self.font_family, 'B', 11); self.cell(40, 7, f'{key}:'); self.set_font(self.font_family, '', 11); self.cell(0, 7, value); self.ln()
        self.ln(5)
    def create_table(self, data: pd.DataFrame, column_widths: List):
        self.set_font(self.font_family, 'B', 10)
        for col, width in zip(data.columns, column_widths): self.cell(width, 8, col, 1, 0, 'C')
        self.ln()
        self.set_font(self.font_family, '', 10)
        for _, row in data.iterrows():
            for col, width in zip(data.columns, column_widths):
                text = str(row[col]).replace('**', ''); self.cell(width, 7, text, 1, 0, 'C' if col not in ["H·ªçc k·ª≥", "Course", "T√™n m√¥n h·ªçc"] else "L")
            self.ln()
# ... (C√°c h√†m calc_gpa, check_academic_warning, v.v. gi·ªØ nguy√™n)
@st.cache_data
def to_csv(df: pd.DataFrame) -> bytes:
    return df.to_csv(index=False).encode("utf-8")
def calc_gpa(df: pd.DataFrame, grade_map: Dict[str, float]) -> float:
    if df.empty: return 0.0
    work = df.copy()
    fail_grades = [grade for grade, point in grade_map.items() if point == 0.0]
    work_passed = work[~work["Grade"].isin(fail_grades)]
    if work_passed.empty: return 0.0
    work_passed["Points"] = work_passed["Grade"].map(grade_map).fillna(0.0)
    work_passed["QP"] = work_passed["Points"] * pd.to_numeric(work_passed["Credits"], errors="coerce").fillna(0.0)
    total_credits = pd.to_numeric(work_passed["Credits"], errors="coerce").fillna(0.0).sum()
    if total_credits <= 0: return 0.0
    return (work_passed["QP"].sum()) / total_credits
def check_academic_warning(semester_number: int, sgpa: float, cumulative_f_credits: float, previous_warning_level: int) -> Tuple[int, str, List[str]]:
    reasons, is_warning_condition_met = [], False
    if semester_number == 1 and sgpa < 0.80: is_warning_condition_met = True; reasons.append(f"SGPA h·ªçc k·ª≥ 1 ({sgpa:.2f}) < 0.80")
    elif semester_number > 1 and sgpa < 1.00: is_warning_condition_met = True; reasons.append(f"SGPA ({sgpa:.2f}) < 1.00")
    if cumulative_f_credits > 24: is_warning_condition_met = True; reasons.append(f"T·ªïng t√≠n ch·ªâ n·ª£ ({cumulative_f_credits}) > 24")
    current_warning_level = 0
    if is_warning_condition_met: current_warning_level = min(previous_warning_level + 1, 3)
    if current_warning_level > 0: return current_warning_level, f"C·∫£nh b√°o h·ªçc t·∫≠p M·ª©c {current_warning_level}", reasons
    return 0, "ƒê·∫°t y√™u c·∫ßu", []
def calculate_progress(all_sems_data: List[pd.DataFrame], requirements: Dict, grade_map: Dict):
    if not any(not df.empty for df in all_sems_data): return pd.DataFrame()
    master_df = pd.concat(all_sems_data, ignore_index=True)
    fail_grades = [grade for grade, point in grade_map.items() if point == 0.0]
    passed_df = master_df[~master_df["Grade"].isin(fail_grades)].copy()
    passed_df["Credits"] = pd.to_numeric(passed_df["Credits"], errors="coerce").fillna(0.0)
    progress_data = []
    total_completed = passed_df["Credits"].sum()
    total_required = requirements.get("T·ªïng t√≠n ch·ªâ t√≠ch l≈©y", 1)
    progress_data.append({"Kh·ªëi ki·∫øn th·ª©c": "T·ªïng t√≠n ch·ªâ", "T√≠n ch·ªâ Ho√†n th√†nh": total_completed, "T√≠n ch·ªâ Y√™u c·∫ßu": total_required})
    category_credits = passed_df.groupby("Category")["Credits"].sum()
    for category_name, required in requirements.items():
        if category_name == "T·ªïng t√≠n ch·ªâ t√≠ch l≈©y": continue
        completed = category_credits.get(category_name, 0.0)
        progress_data.append({"Kh·ªëi ki·∫øn th·ª©c": category_name, "T√≠n ch·ªâ Ho√†n th√†nh": completed, "T√≠n ch·ªâ Y√™u c·∫ßu": required})
    df = pd.DataFrame(progress_data)
    df["C√≤n l·∫°i"] = (df["T√≠n ch·ªâ Y√™u c·∫ßu"] - df["T√≠n ch·ªâ Ho√†n th√†nh"]).clip(lower=0)
    df["Ti·∫øn ƒë·ªô"] = (df["T√≠n ch·ªâ Ho√†n th√†nh"] / df["T√≠n ch·ªâ Y√™u c·∫ßu"]).clip(0, 1) if df["T√≠n ch·ªâ Y√™u c·∫ßu"].all() > 0 else 0
    return df
def get_preloaded_sems_from_major(major_name):
    data = MAJORS_DATA[major_name].get("preloaded_data", [])
    if not data: return [], 1
    df = pd.DataFrame(data)
    max_sem = df["Semester"].max() if "Semester" in df.columns and not df.empty else 1
    sems = []
    for i in range(1, int(max_sem) + 1):
        sem_df = df[df["Semester"] == i][["Course", "Credits", "Grade", "Category"]].reset_index(drop=True)
        sems.append(sem_df if not sem_df.empty else pd.DataFrame(columns=["Course", "Credits", "Grade", "Category"]))
    return sems, int(max_sem)
def get_student_level(credits: float) -> str:
    if credits < 37: return "NƒÉm th·ª© nh·∫•t"
    if 37 <= credits <= 72: return "NƒÉm th·ª© hai"
    if 73 <= credits <= 108: return "NƒÉm th·ª© ba"
    if 109 <= credits <= 142: return "NƒÉm th·ª© t∆∞"
    return "NƒÉm th·ª© nƒÉm"
def get_gpa_ranking(gpa: float) -> str:
    if gpa >= 3.60: return "Xu·∫•t s·∫Øc"
    if 3.20 <= gpa < 3.60: return "Gi·ªèi"
    if 2.50 <= gpa < 3.20: return "Kh√°"
    if 2.30 <= gpa < 2.50: return "Trung b√¨nh kh√°"
    if 2.00 <= gpa < 2.30: return "Trung b√¨nh"
    if 1.50 <= gpa < 2.00: return "Trung b√¨nh y·∫øu"
    if 1.00 <= gpa < 1.50: return "Y·∫øu"
    return "K√©m"
def generate_pdf_report(student_info, summary_df, detailed_dfs, total_summary):
    pdf = PDF()
    pdf.alias_nb_pages(); pdf.add_page()
    pdf.student_info(student_info)
    pdf.chapter_title('B·∫£ng ƒëi·ªÉm T·ªïng h·ª£p')
    pdf.create_table(summary_df, column_widths=[50, 30, 30, 25, 35])
    pdf.ln(5)
    pdf.chapter_title('T·ªïng k·∫øt To√†n kh√≥a')
    pdf.set_font(pdf.font_family, '', 11)
    for key, value in total_summary.items():
        pdf.set_font(pdf.font_family, 'B', 11); pdf.cell(50, 7, f'{key}:'); pdf.set_font(pdf.font_family, '', 11); pdf.cell(0, 7, str(value)); pdf.ln()
    pdf.ln(5)
    pdf.add_page()
    pdf.chapter_title('B·∫£ng ƒëi·ªÉm Chi ti·∫øt')
    for i, df in enumerate(detailed_dfs):
        if not df.empty:
            pdf.set_font(pdf.font_family, 'B', 11); pdf.cell(0, 10, f'H·ªçc k·ª≥ {i+1}', 0, 1)
            df_display = df.copy(); df_display.insert(0, 'STT', range(1, len(df_display) + 1))
            pdf_display = df_display.rename(columns={"Course": "T√™n m√¥n h·ªçc", "Credits": "TC", "Grade": "ƒêi·ªÉm", "Category": "Ph√¢n lo·∫°i"})
            pdf.create_table(df_display[['STT', 'T√™n m√¥n h·ªçc', 'TC', 'ƒêi·ªÉm', 'Ph√¢n lo·∫°i']], column_widths=[10, 80, 15, 15, 70])
            pdf.ln(5)
    return pdf.output(dest='S').encode('latin1')

# -----------------------------
# SIDEBAR
# -----------------------------
with st.sidebar:
    st.title("‚öôÔ∏è C√†i ƒë·∫∑t & Thao t√°c")
    st.subheader("Thang ƒëi·ªÉm")
    scale_name = st.selectbox("Ch·ªçn thang ƒëi·ªÉm:", list(PRESET_SCALES.keys()), index=0)
    grade_map = PRESET_SCALES[scale_name]
    st.divider()
    st.subheader("üìÅ Nh·∫≠p / Xu·∫•t File")
    if st.button("‚¨áÔ∏è Xu·∫•t to√†n b·ªô d·ªØ li·ªáu (CSV)"):
        all_dfs = [];
        for i, df in enumerate(st.session_state.get("sems", [])):
            df_copy = df.copy(); df_copy["Semester"] = i + 1; all_dfs.append(df_copy)
        if any(not df.empty for df in all_dfs):
            master_df = pd.concat(all_dfs, ignore_index=True)
            st.download_button(label="T·∫£i v·ªÅ file t·ªïng h·ª£p", data=to_csv(master_df), file_name="GPA_data_all_semesters.csv", mime="text/csv", use_container_width=True)
        else: st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")
    def on_file_upload(): st.session_state.file_processed = False
    upload = st.file_uploader("Nh·∫≠p file CSV (c√≥ c·ªôt Semester, Category)", type=["csv"], key="uploader", on_change=on_file_upload)
    st.divider()
    st.subheader("üñ®Ô∏è In B√°o c√°o")
    if st.button("T·∫°o B√°o c√°o PDF", use_container_width=True): st.session_state.pdf_generated = True

# -----------------------------
# GIAO DI·ªÜN CH√çNH
# -----------------------------
st.title("üéì H·ªá th·ªëng T∆∞ v·∫•n H·ªçc t·∫≠p")
with st.container(border=True):
    col1, col2 = st.columns(2)
    with col1:
        st.text_input("H·ªç v√† t√™n:", value="Nguy·ªÖn ƒê√¨nh Mai Nam", key="sv_hoten")
        st.text_input("M√£ s·ªë sinh vi√™n:", value="2151113235", key="sv_mssv")
    with col2:
        st.text_input("L·ªõp:", value="63CT2", key="sv_lop")
        def on_major_change():
            major = st.session_state.major_selector
            sems, max_sem = get_preloaded_sems_from_major(major)
            st.session_state.sems = sems; st.session_state.n_sem_input = max_sem
        selected_major = st.selectbox("Ng√†nh h·ªçc:", options=list(MAJORS_DATA.keys()), key="major_selector", on_change=on_major_change)
st.divider()
if "sems" not in st.session_state: on_major_change()
GRADUATION_REQUIREMENTS_CURRENT = MAJORS_DATA[selected_major]['graduation_requirements']
DEFAULT_COURSE_CATEGORIES_CURRENT = MAJORS_DATA[selected_major]['course_categories']
if upload is not None and not st.session_state.get('file_processed', False):
    try:
        df_up = pd.read_csv(upload, encoding='utf-8')
        needed = {"Course", "Credits", "Grade", "Semester", "Category"}
        if not needed.issubset(df_up.columns): st.warning("File CSV ph·∫£i c√≥ c√°c c·ªôt: Course, Credits, Grade, Semester, Category")
        else:
            df_up["Semester"] = pd.to_numeric(df_up["Semester"], errors="coerce").fillna(1).astype(int)
            max_sem = df_up["Semester"].max()
            st.session_state.n_sem_input = max_sem
            new_sems = [df_up[df_up["Semester"] == i][["Course", "Credits", "Grade", "Category"]].reset_index(drop=True) for i in range(1, max_sem + 1)]
            st.session_state.sems = new_sems
            st.session_state.file_processed = True; st.success(f"ƒê√£ nh·∫≠p v√† ph√¢n b·ªï d·ªØ li·ªáu cho {max_sem} h·ªçc k·ª≥."); st.rerun()
    except Exception as e: st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file CSV: {e}"); st.session_state.file_processed = True
tab1, tab2 = st.tabs(["B·∫£ng ƒëi·ªÉm Chi ti·∫øt", "B·∫£ng ƒëi·ªÉm T·ªïng h·ª£p"])
with tab1:
    st.header("üìä B·∫£ng t·ªïng quan Ti·∫øn ƒë·ªô T·ªët nghi·ªáp")
    progress_df = calculate_progress(st.session_state.sems, GRADUATION_REQUIREMENTS_CURRENT, grade_map)
    if not progress_df.empty:
        total_progress = progress_df.iloc[0]
        st.subheader(f"T·ªïng quan: {total_progress['T√≠n ch·ªâ Ho√†n th√†nh']:.0f} / {total_progress['T√≠n ch·ªâ Y√™u c·∫ßu']:.0f} t√≠n ch·ªâ ƒë√£ t√≠ch l≈©y")
        st.progress(total_progress['Ti·∫øn ƒë·ªô'], text=f"{total_progress['Ti·∫øn ƒë·ªô']:.1%}")
        st.markdown("---")
        detail_df = progress_df[progress_df['T√≠n ch·ªâ Y√™u c·∫ßu'] > 0].iloc[1:].reset_index(drop=True)
        if not detail_df.empty:
            st.subheader("Chi ti·∫øt theo kh·ªëi ki·∫øn th·ª©c")
            left_col, right_col = st.columns(2)
            for i, row in detail_df.iterrows():
                target_col = left_col if i % 2 == 0 else right_col
                with target_col:
                    delta_text = f"C√≤n l·∫°i: {row['C√≤n l·∫°i']:.0f}"; delta_color = "inverse"
                    if row['C√≤n l·∫°i'] == 0: delta_text = "‚úÖ Ho√†n th√†nh"; delta_color = "off"
                    st.metric(label=str(row["Kh·ªëi ki·∫øn th·ª©c"]), value=f"{row['T√≠n ch·ªâ Ho√†n th√†nh']:.0f} / {row['T√≠n ch·ªâ Y√™u c·∫ßu']:.0f}", delta=delta_text, delta_color=delta_color)
                    st.progress(row['Ti·∫øn ƒë·ªô'])
    else: st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch ti·∫øn ƒë·ªô.")
    st.divider()
    n_sem = st.number_input("S·ªë h·ªçc k·ª≥ (semesters)", min_value=1, max_value=20, value=st.session_state.get('n_sem_input', 8), step=1, key="n_sem_input")
    if "manual_warnings" not in st.session_state or len(st.session_state.manual_warnings) != n_sem: st.session_state.manual_warnings = ["Kh√¥ng"] * n_sem
    if len(st.session_state.sems) != n_sem:
        current_sems = st.session_state.get("sems", []); current_len = len(current_sems)
        if current_len < n_sem: current_sems += [pd.DataFrame(columns=["Course", "Credits", "Grade", "Category"]) for _ in range(n_sem - current_len)]
        else: current_sems = current_sems[:n_sem]
        st.session_state.sems = current_sems; st.rerun()
    sem_tabs = st.tabs([f"H·ªçc k·ª≥ {i+1}" for i in range(n_sem)])
    per_sem_gpa, per_sem_cred, warning_history = [], [], []
    cumulative_f_credits, previous_warning_level = 0.0, 0
    fail_grades = [grade for grade, point in grade_map.items() if point == 0.0]
    for i, tab in enumerate(sem_tabs):
        with tab:
            st.write(f"### B·∫£ng ƒëi·ªÉm H·ªçc k·ª≥ {i+1}")
            df_with_delete = st.session_state.sems[i].copy(); df_with_delete.insert(0, "X√≥a", False)
            grade_options = list(grade_map.keys())
            if not grade_options: st.warning("Ch∆∞a c√≥ thang ƒëi·ªÉm."); grade_options = ["..."]
            edited = st.data_editor(df_with_delete, num_rows="dynamic", hide_index=True, use_container_width=True,
                column_config={"X√≥a": st.column_config.CheckboxColumn(width="small"), "Course": st.column_config.TextColumn("T√™n m√¥n h·ªçc", width="large", required=True),"Credits": st.column_config.NumberColumn("S·ªë t√≠n ch·ªâ", min_value=0.0, step=0.5, required=True),"Grade": st.column_config.SelectboxColumn("ƒêi·ªÉm ch·ªØ", options=grade_options, required=True),"Category": st.column_config.SelectboxColumn("Ph√¢n lo·∫°i", options=DEFAULT_COURSE_CATEGORIES_CURRENT, required=True)}, key=f"editor_{i}")
            st.session_state.sems[i] = edited.drop(columns=["X√≥a"])
            current_sem_df = st.session_state.sems[i]
            gpa = calc_gpa(current_sem_df, grade_map); per_sem_gpa.append(gpa)
            creds = pd.to_numeric(current_sem_df["Credits"], errors="coerce").fillna(0.0).sum(); per_sem_cred.append(float(creds))
            current_f_credits = pd.to_numeric(current_sem_df[current_sem_df["Grade"].isin(fail_grades)]["Credits"], errors="coerce").fillna(0.0).sum()
            cumulative_f_credits += current_f_credits
            auto_warning_level, _, auto_reasons = check_academic_warning(i + 1, gpa, cumulative_f_credits, previous_warning_level)
            st.divider()
            m1, m2, m3 = st.columns(3)
            m1.metric("GPA h·ªçc k·ª≥ (SGPA)", f"{gpa:.3f}"); m2.metric("T·ªïng t√≠n ch·ªâ h·ªçc k·ª≥", f"{creds:.2f}")
            m3.metric("T√≠n ch·ªâ n·ª£ t√≠ch l≈©y", value=f"{cumulative_f_credits:.2f}", delta=f"{current_f_credits:.2f} TC n·ª£ m·ªõi" if current_f_credits > 0 else None, delta_color="inverse")
            st.write("##### T√¨nh tr·∫°ng h·ªçc v·ª•")
            if i > 0:
                w_col1, w_col2 = st.columns(2)
                with w_col1: st.metric("K·∫øt qu·∫£ XLHV h·ªçc k·ª≥ tr∆∞·ªõc:", f"M·ª©c {previous_warning_level}" if previous_warning_level > 0 else "Kh√¥ng")
                with w_col2: st.metric("K·∫øt qu·∫£ XLHV d·ª± ki·∫øn:", f"M·ª©c {auto_warning_level}" if auto_warning_level > 0 else "Kh√¥ng", delta="D·ª±a tr√™n ƒëi·ªÉm k·ª≥ n√†y", delta_color="off")
            else:
                st.metric("K·∫øt qu·∫£ XLHV d·ª± ki·∫øn:", f"M·ª©c {auto_warning_level}" if auto_warning_level > 0 else "Kh√¥ng", delta="D·ª±a tr√™n ƒëi·ªÉm k·ª≥ n√†y", delta_color="off")
            
            manual_warning_options = ["Kh√¥ng", "M·ª©c 1", "M·ª©c 2", "M·ª©c 3", "X√≥a t√™n kh·ªèi danh s√°ch"]
            selected_warning_str = st.selectbox("X·ª≠ l√Ω h·ªçc v·ª• (ch√≠nh th·ª©c):", options=manual_warning_options, index=manual_warning_options.index(st.session_state.manual_warnings[i]) if st.session_state.manual_warnings[i] in manual_warning_options else 0, key=f"manual_warning_{i}")
            st.session_state.manual_warnings[i] = selected_warning_str
            
            warning_map = {"Kh√¥ng": 0, "M·ª©c 1": 1, "M·ª©c 2": 2, "M·ª©c 3": 3, "X√≥a t√™n kh·ªèi danh s√°ch": 4}
            final_warning_level = warning_map.get(selected_warning_str, 0)
            
            warning_history.append({"H·ªçc k·ª≥": i + 1, "M·ª©c C·∫£nh b√°o": final_warning_level, "L√Ω do": ", ".join(auto_reasons) if auto_reasons else "Kh√¥ng c√≥"})
            previous_warning_level = final_warning_level
            with st.expander("üî¥ Thao t√°c Nguy hi·ªÉm"):
                c1, c2 = st.columns(2)
                with c1:
                    if st.button("üóëÔ∏è X√≥a m√¥n ƒë√£ ch·ªçn", key=f"delete_{i}", use_container_width=True, type="secondary"):
                        rows_to_keep = [row for _, row in edited.iterrows() if not row["X√≥a"]]
                        st.session_state.sems[i] = pd.DataFrame(rows_to_keep).drop(columns=["X√≥a"]); st.rerun()
                with c2:
                    if st.button("üîÑ Reset h·ªçc k·ª≥", key=f"confirm_reset_btn_{i}", use_container_width=True, type="secondary"): st.session_state[f"confirm_reset_{i}"] = True
                if st.session_state.get(f"confirm_reset_{i}", False):
                    st.warning("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu c·ªßa h·ªçc k·ª≥ n√†y kh√¥ng?")
                    cc1, cc2 = st.columns(2)
                    with cc1:
                        if st.button("‚ö†Ô∏è V√¢ng, t√¥i ch·∫Øc ch·∫Øn", key=f"reset_yes_{i}", use_container_width=True, type="primary"):
                            st.session_state.sems[i] = pd.DataFrame(columns=["Course", "Credits", "Grade", "Category"])
                            st.session_state[f"confirm_reset_{i}"] = False; st.rerun()
                    with cc2:
                        if st.button("H·ªßy b·ªè", key=f"reset_no_{i}", use_container_width=True):
                            st.session_state[f"confirm_reset_{i}"] = False; st.rerun()
    st.divider()
    st.header("T·ªïng k·∫øt To√†n kh√≥a")
    all_passed_dfs = [df[~df["Grade"].isin(fail_grades)] for df in st.session_state.sems]
    master_passed_df = pd.concat(all_passed_dfs) if all_passed_dfs else pd.DataFrame()
    cgpa = calc_gpa(master_passed_df, grade_map)
    total_passed_credits = pd.to_numeric(master_passed_df['Credits'], errors='coerce').fillna(0).sum()
    colA, colB = st.columns(2); colC, colD = st.columns(2)
    with colA: st.metric("üéØ GPA T√≠ch l≈©y (CGPA)", f"{cgpa:.3f}")
    with colB: st.metric("üìö T·ªïng t√≠n ch·ªâ ƒë√£ qua", f"{total_passed_credits:.2f}")
    with colC: st.metric("üßë‚Äçüéì Tr√¨nh ƒë·ªô sinh vi√™n", get_student_level(total_passed_credits))
    with colD: st.metric("üèÜ X·∫øp lo·∫°i h·ªçc l·ª±c", get_gpa_ranking(cgpa))
    chart_col, _ = st.columns([1, 1])
    with chart_col:
        st.subheader("Xu h∆∞·ªõng GPA theo h·ªçc k·ª≥")
        if per_sem_gpa and all(c >= 0 for c in per_sem_cred):
            try:
                fig, ax = plt.subplots(); x = np.arange(1, len(per_sem_gpa) + 1)
                ax.plot(x, per_sem_gpa, marker="o", linestyle="-", color='b')
                ax.set_xlabel("H·ªçc k·ª≥"); ax.set_ylabel("GPA (SGPA)"); ax.set_title("Bi·ªÉu ƒë·ªì GPA c√°c h·ªçc k·ª≥")
                ax.set_xticks(x); ax.grid(True, linestyle=":", linewidth=0.5)
                ax.set_ylim(bottom=0, top=max(4.1, max(per_sem_gpa) * 1.1 if per_sem_gpa and any(v > 0 for v in per_sem_gpa) else 4.1))
                st.pyplot(fig, use_container_width=True)
            except Exception: st.info("Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")

with tab2:
    st.header("B·∫£ng ƒëi·ªÉm T·ªïng h·ª£p theo H·ªçc k·ª≥ v√† NƒÉm h·ªçc")
    summary_data, cumulative_credits, cumulative_qp = [], 0.0, 0.0
    year_map = {1: "th·ª© nh·∫•t", 2: "th·ª© hai", 3: "th·ª© ba", 4: "th·ª© t∆∞", 5: "th·ª© nƒÉm"}
    for i in range(len(st.session_state.sems)):
        sem_df = st.session_state.sems[i]
        sem_gpa = per_sem_gpa[i]
        passed_df = sem_df[~sem_df['Grade'].isin(fail_grades)]
        passed_credits = pd.to_numeric(passed_df['Credits'], errors='coerce').fillna(0).sum()
        sem_qp = calc_gpa(passed_df, grade_map) * passed_credits
        cumulative_credits += passed_credits; cumulative_qp += sem_qp
        cumulative_gpa = (cumulative_qp / cumulative_credits) if cumulative_credits > 0 else 0.0
        summary_data.append({"H·ªçc k·ª≥": f"H·ªçc k·ª≥ {i + 1}", "TBC H·ªá 4 (SGPA)": f"{sem_gpa:.2f}", "TBTL H·ªá 4 (CGPA)": f"{cumulative_gpa:.2f}", "S·ªë TC ƒê·∫°t": int(passed_credits), "S·ªë TCTL ƒê·∫°t": int(cumulative_credits)})
        if (i + 1) % 2 == 0:
            year_number = (i // 2) + 1; year_text = year_map.get(year_number, f"th·ª© {year_number}"); year_str = f"NƒÉm {year_text}"
            summary_data.append({"H·ªçc k·ª≥": f"**{year_str}**", "TBC H·ªá 4 (SGPA)": "", "TBTL H·ªá 4 (CGPA)": f"**{cumulative_gpa:.2f}**", "S·ªë TC ƒê·∫°t": f"**{int(per_sem_cred[i] + per_sem_cred[i-1])}**", "S·ªë TCTL ƒê·∫°t": f"**{int(cumulative_credits)}**"})
    st.dataframe(pd.DataFrame(summary_data), use_container_width=True, hide_index=True)

if st.session_state.get('pdf_generated', False):
    student_info_dict = {"H·ªç v√† t√™n": st.session_state.sv_hoten, "M√£ SV": st.session_state.sv_mssv, "L·ªõp": st.session_state.sv_lop, "Ng√†nh h·ªçc": selected_major}
    summary_df_pdf = pd.DataFrame(summary_data)
    total_summary_dict = {"GPA T√≠ch l≈©y (CGPA)": f"{cgpa:.3f}", "T·ªïng t√≠n ch·ªâ ƒë√£ qua": f"{total_passed_credits:.2f}", "Tr√¨nh ƒë·ªô sinh vi√™n": get_student_level(total_passed_credits), "X·∫øp lo·∫°i h·ªçc l·ª±c": get_gpa_ranking(cgpa)}
    pdf_data = generate_pdf_report(student_info_dict, summary_df_pdf, st.session_state.sems, total_summary_dict)
    st.sidebar.download_button(label="T·∫£i v·ªÅ B√°o c√°o PDF", data=pdf_data, file_name=f"Bao_cao_hoc_tap_{st.session_state.sv_mssv}.pdf", mime="application/pdf", use_container_width=True)
    st.session_state.pdf_generated = False

with st.expander("‚ùì H∆∞·ªõng d·∫´n"):
    st.markdown("""- **Nh·∫≠p/Xu·∫•t file:** File CSV ph·∫£i c√≥ c√°c c·ªôt: `Course`, `Credits`, `Grade`, `Semester`, `Category`.\n- **Th√™m/x√≥a m√¥n h·ªçc:** D√πng n√∫t `+` ƒë·ªÉ th√™m v√† tick v√†o √¥ "X√≥a" r·ªìi nh·∫•n n√∫t "üóëÔ∏è X√≥a m√¥n ƒë√£ ch·ªçn" ƒë·ªÉ x√≥a.\n- **X·ª≠ l√Ω h·ªçc v·ª•:** Ch·ªçn m·ª©c c·∫£nh b√°o ch√≠nh th·ª©c c·ªßa nh√† tr∆∞·ªùng t·∫°i m·ªói h·ªçc k·ª≥ ƒë·ªÉ ghi ƒë√® l√™n k·∫øt qu·∫£ t√≠nh to√°n t·ª± ƒë·ªông c·ªßa ·ª©ng d·ª•ng.""")
with st.expander("üìú C√°ch t√≠nh & L·ªãch s·ª≠ x·ª≠ l√Ω h·ªçc v·ª•"):
    def style_warning_html(level):
        if level == 0: return f'<p style="color: green; margin:0;">Kh√¥ng</p>'
        if level == 1: return f'<p style="color: orange; font-weight: bold; margin:0;">M·ª©c {level}</p>'
        if level in [2, 3]: return f'<p style="color: red; font-weight: bold; margin:0;">M·ª©c {level}</p>'
        if level == 4: return f'<p style="color: white; background-color: black; font-weight: bold; margin:0; padding: 2px 5px; border-radius: 3px;">X√≥a t√™n</p>'
    display_df = pd.DataFrame(warning_history)
    display_df["M·ª©c C·∫£nh b√°o"] = display_df["M·ª©c C·∫£nh b√°o"].apply(style_warning_html)
    display_df = display_df.rename(columns={"H·ªçc k·ª≥": "<b>H·ªçc k·ª≥</b>", "M·ª©c C·∫£nh b√°o": "<b>M·ª©c X·ª≠ l√Ω</b>", "L√Ω do": "<b>L√Ω do (g·ª£i √Ω)</b>"})
    st.markdown(display_df.to_html(escape=False, index=False), unsafe_allow_html=True)
