import streamlit as st
import pandas as pd
from typing import Dict, List, Tuple
import matplotlib.pyplot as plt
import numpy as np
from fpdf import FPDF
import base64

st.set_page_config(page_title="H·ªá th·ªëng T∆∞ v·∫•n H·ªçc t·∫≠p", page_icon="üéì", layout="wide")

# -----------------------------
# D·ªÆ LI·ªÜU C·∫§U H√åNH & H·∫∞NG S·ªê
# -----------------------------
MAJORS_DATA = {
    "C√¥ng ngh·ªá k·ªπ thu·∫≠t x√¢y d·ª±ng": {
        "course_categories": ["L√Ω lu·∫≠n ch√≠nh tr·ªã", "K·ªπ nƒÉng", "Ngo·∫°i ng·ªØ", "Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc", "Gi√°o d·ª•c qu·ªëc ph√≤ng an ninh", "Gi√°o d·ª•c th·ªÉ ch·∫•t", "Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh", "Ki·∫øn th·ª©c c∆° s·ªü ng√†nh", "Ki·∫øn th·ª©c ng√†nh", "Ki·∫øn th·ª©c t·ª± ch·ªçn", "Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp", "M√¥n h·ªçc ƒëi·ªÅu ki·ªán", "Chu·∫©n ƒë·∫ßu ra"],
        "graduation_requirements": {"L√Ω lu·∫≠n ch√≠nh tr·ªã": 13, "K·ªπ nƒÉng": 3, "Ngo·∫°i ng·ªØ": 6, "Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc": 21, "Gi√°o d·ª•c qu·ªëc ph√≤ng an ninh": 11, "Gi√°o d·ª•c th·ªÉ ch·∫•t": 34, "Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh": 31, "Ki·∫øn th·ª©c c∆° s·ªü ng√†nh": 22, "Ki·∫øn th·ª©c ng√†nh": 39, "Ki·∫øn th·ª©c t·ª± ch·ªçn": 27, "Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp": 13},
        # N√ÇNG C·∫§P: Th√™m to√†n b·ªô ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ƒë·ªÉ so s√°nh
        "full_curriculum": [
            # D·ªØ li·ªáu n√†y ƒë∆∞·ª£c t·ªïng h·ª£p t·ª´ file ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o v√† b·∫£ng ƒëi·ªÉm
            {'Course': 'B√≥ng chuy·ªÅn 1', 'Credits': 1, 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t'}, {'Course': 'B√≥ng chuy·ªÅn 2', 'Credits': 1, 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t'}, {'Course': 'B√≥ng r·ªï', 'Credits': 1, 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t'}, {'Course': 'H√≥a h·ªçc ƒë·∫°i c∆∞∆°ng', 'Credits': 3, 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc'}, {'Course': 'C·∫ßu l√¥ng', 'Credits': 1, 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t'}, {'Course': 'Tin h·ªçc c∆° b·∫£n', 'Credits': 2, 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc'}, {'Course': 'Gi·∫£i t√≠ch h√†m m·ªôt bi·∫øn', 'Credits': 3, 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc'}, {'Course': 'K·ªπ nƒÉng m·ªÅm v√† tinh th·∫ßn kh·ªüi nghi·ªáp', 'Credits': 3, 'Category': 'K·ªπ nƒÉng'}, {'Course': 'S·ª©c b·ªÅn v·∫≠t li·ªáu 1', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh'}, {'Course': 'V·∫≠t li·ªáu x√¢y d·ª±ng', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh'}, {'Course': 'S·ª©c b·ªÅn v·∫≠t li·ªáu 2', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh'}, {'Course': 'Ti·∫øng Anh 1', 'Credits': 3, 'Category': 'Ngo·∫°i ng·ªØ'}, {'Course': 'C∆° h·ªçc ch·∫•t l·ªèng', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh'}, {'Course': 'Ph√°p lu·∫≠t ƒë·∫°i c∆∞∆°ng', 'Credits': 2, 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã'}, {'Course': 'ƒê·ªãa ch·∫•t c√¥ng tr√¨nh', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh'}, {'Course': 'Tri·∫øt h·ªçc M√°c - L√™nin', 'Credits': 3, 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã'}, {'Course': 'V·∫≠t l√Ω 2', 'Credits': 3, 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc'}, {'Course': 'ƒê·ªì h·ªça k·ªπ thu·∫≠t 1', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh'}, {'Course': 'ƒê·ªì h·ªça k·ªπ thu·∫≠t 2', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh'}, {'Course': 'K·ªπ thu·∫≠t ƒëi·ªán', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh'}, {'Course': 'N·ªÅn m√≥ng', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'C∆° h·ªçc ƒë·∫•t', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh', 'Credits': 2, 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã'}, {'Course': 'Th·ªßy l·ª±c c√¥ng tr√¨nh', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'Th·ªßy vƒÉn c√¥ng tr√¨nh', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'Gi·∫£i t√≠ch h√†m nhi·ªÅu bi·∫øn', 'Credits': 3, 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc'}, {'Course': 'Kinh t·∫ø ch√≠nh tr·ªã M√°c - L√™nin', 'Credits': 2, 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã'}, {'Course': 'Nh·∫≠p m√¥n ng√†nh C√¥ng ngh·ªá k·ªπ thu·∫≠t x√¢y d·ª±ng', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh'}, {'Course': 'Ch·ªß nghƒ©a x√£ h·ªôi khoa h·ªçc', 'Credits': 2, 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã'}, {'Course': 'Th·ªëng k√™ trong k·ªπ thu·∫≠t', 'Credits': 2, 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc'}, {'Course': 'Tr·∫Øc ƒë·ªãa', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh'}, {'Course': 'Th·ª±c t·∫≠p tr·∫Øc ƒë·ªãa', 'Credits': 1, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh'}, {'Course': 'Kinh t·∫ø x√¢y d·ª±ng 1', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'C∆° s·ªü thi·∫øt k·∫ø c√¥ng tr√¨nh d√¢n d·ª•ng v√† c√¥ng nghi·ªáp', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': '·ª®ng d·ª•ng BIM trong x√¢y d·ª±ng', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'C√¥ng ngh·ªá x√¢y d·ª±ng c√¥ng tr√¨nh b√™ t√¥ng', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'C√¥ng ngh·ªá x√¢y d·ª±ng c√¥ng tr√¨nh ƒë·∫•t ƒë√°', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'C√¥ng ngh·ªá x·ª≠ l√Ω n·ªÅn m√≥ng', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'Qu·∫£n l√Ω ƒë·∫ßu t∆∞ x√¢y d·ª±ng', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'An to√†n x√¢y d·ª±ng', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'T·ªï ch·ª©c x√¢y d·ª±ng', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'Thi c√¥ng c√¥ng tr√¨nh ng·∫ßm', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'L·ªãch s·ª≠ ƒê·∫£ng C·ªông s·∫£n Vi·ªát Nam', 'Credits': 2, 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã'}, {'Course': 'M√°y x√¢y d·ª±ng', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'Gi·ªõi thi·ªáu v√† c∆° s·ªü thi·∫øt k·∫ø c√¥ng tr√¨nh th·ªßy', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'Thi·∫øt k·∫ø c√¥ng tr√¨nh c·∫ßu ƒë∆∞·ªùng', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'Thi·∫øt k·∫ø ƒë√™ v√† c√¥ng tr√¨nh b·∫£o v·ªá b·ªù s√¥ng', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'Th·ª±c t·∫≠p ƒë·ªãa ch·∫•t c√¥ng tr√¨nh', 'Credits': 1, 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh'}, {'Course': 'Th·ª±c t·∫≠p k·ªπ thu·∫≠t v√† t·ªï ch·ª©c x√¢y d·ª±ng', 'Credits': 3, 'Category': 'Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp'}, {'Course': 'ƒê·ªì √°n t·ªï ch·ª©c x√¢y d·ª±ng', 'Credits': 1, 'Category': 'Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp'}, {'Course': 'ƒê·ªì √°n c√¥ng ngh·ªá x√¢y d·ª±ng c√¥ng tr√¨nh b√™ t√¥ng', 'Credits': 1, 'Category': 'Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp'}, {'Course': 'ƒê·ªì √°n c√¥ng ngh·ªá x√¢y d·ª±ng c√¥ng tr√¨nh ƒë·∫•t ƒë√°', 'Credits': 1, 'Category': 'Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp'}, {'Course': 'D·∫´n d√≤ng thi c√¥ng v√† c√¥ng t√°c h·ªë m√≥ng', 'Credits': 2, 'Category': 'Ki·∫øn th·ª©c ng√†nh'}, {'Course': 'ƒê·ªì √°n d·∫´n d√≤ng thi c√¥ng v√† c√¥ng t√°c h·ªë m√≥ng', 'Credits': 1, 'Category': 'Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp'}, {'Course': 'Gi√°m s√°t ch·∫•t l∆∞·ª£ng c√¥ng tr√¨nh', 'Credits': 3, 'Category': 'Ki·∫øn th·ª©c ng√†nh'},
        ],
        "preloaded_data": [
            {'Course': 'B√≥ng chuy·ªÅn 1', 'Credits': 1, 'Grade': 'D', 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t', 'Semester': 1}, {'Course': 'B√≥ng chuy·ªÅn 2', 'Credits': 1, 'Grade': 'C', 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t', 'Semester': 1}, {'Course': 'B√≥ng r·ªï', 'Credits': 1, 'Grade': 'B', 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t', 'Semester': 1}, {'Course': 'H√≥a h·ªçc ƒë·∫°i c∆∞∆°ng', 'Credits': 3, 'Grade': 'D', 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc', 'Semester': 1}, {'Course': 'C·∫ßu l√¥ng', 'Credits': 1, 'Grade': 'C', 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t', 'Semester': 1}, {'Course': 'Tin h·ªçc c∆° b·∫£n', 'Credits': 2, 'Grade': 'B', 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc', 'Semester': 1}, {'Course': 'Gi·∫£i t√≠ch h√†m m·ªôt bi·∫øn', 'Credits': 3, 'Grade': 'C', 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc', 'Semester': 1}, {'Course': 'K·ªπ nƒÉng m·ªÅm v√† tinh th·∫ßn kh·ªüi nghi·ªáp', 'Credits': 3, 'Grade': 'B', 'Category': 'K·ªπ nƒÉng', 'Semester': 1},
            {'Course': 'S·ª©c b·ªÅn v·∫≠t li·ªáu 1', 'Credits': 3, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh', 'Semester': 2}, {'Course': 'V·∫≠t li·ªáu x√¢y d·ª±ng', 'Credits': 3, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh', 'Semester': 2}, {'Course': 'S·ª©c b·ªÅn v·∫≠t li·ªáu 2', 'Credits': 2, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh', 'Semester': 2}, {'Course': 'Ti·∫øng Anh 1', 'Credits': 3, 'Grade': 'C', 'Category': 'Ngo·∫°i ng·ªØ', 'Semester': 2}, {'Course': 'C∆° h·ªçc ch·∫•t l·ªèng', 'Credits': 3, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh', 'Semester': 2}, {'Course': 'Ph√°p lu·∫≠t ƒë·∫°i c∆∞∆°ng', 'Credits': 2, 'Grade': 'C', 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã', 'Semester': 2}, {'Course': 'ƒê·ªãa ch·∫•t c√¥ng tr√¨nh', 'Credits': 2, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh', 'Semester': 2}, {'Course': 'Tri·∫øt h·ªçc M√°c - L√™nin', 'Credits': 3, 'Grade': 'D', 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã', 'Semester': 2},
    "Qu·∫£n l√Ω x√¢y d·ª±ng": {
        "course_categories": ["Kinh t·∫ø", "Lu·∫≠t", "Qu·∫£n l√Ω d·ª± √°n", "K·ªπ thu·∫≠t c∆° s·ªü"],
        "graduation_requirements": { "Kinh t·∫ø": 40, "Lu·∫≠t": 20, "Qu·∫£n l√Ω d·ª± √°n": 50, "K·ªπ thu·∫≠t c∆° s·ªü": 40, },
        "full_curriculum": [ # D·ªØ li·ªáu m·∫´u
            {'Course': 'Kinh t·∫ø vi m√¥', 'Credits': 3, 'Category': 'Kinh t·∫ø'}, {'Course': 'Lu·∫≠t x√¢y d·ª±ng', 'Credits': 2, 'Category': 'Lu·∫≠t'}, {'Course': 'Qu·∫£n l√Ω d·ª± √°n x√¢y d·ª±ng', 'Credits': 3, 'Category': 'Qu·∫£n l√Ω d·ª± √°n'},
        ],
        "preloaded_data": [
            {'Course': 'Kinh t·∫ø vi m√¥', 'Credits': 3, 'Grade': 'A', 'Category': 'Kinh t·∫ø', 'Semester': 1},
            {'Course': 'Lu·∫≠t x√¢y d·ª±ng', 'Credits': 2, 'Grade': 'B', 'Category': 'Lu·∫≠t', 'Semester': 1},
# -----------------------------
# C√ÅC H√ÄM TI·ªÜN √çCH
# -----------------------------
# ... (C√°c h√†m kh√°c gi·ªØ nguy√™n)
# ... (C√°c h√†m calc_gpa, check_academic_warning, v.v. gi·ªØ nguy√™n v√† th√™m h√†m PDF)
@st.cache_data
def to_csv(df: pd.DataFrame) -> bytes:
    return df.to_csv(index=False).encode("utf-8")
    total_credits = pd.to_numeric(work_passed["Credits"], errors="coerce").fillna(0.0).sum()
    if total_credits <= 0: return 0.0
    return (work_passed["QP"].sum()) / total_credits

# S·ª¨A L·ªñI: Kh√¥i ph·ª•c l·∫°i h√†m c·∫£nh b√°o ch√≠nh x√°c
def check_academic_warning(semester_number: int, sgpa: float, cumulative_f_credits: float, previous_warning_level: int) -> Tuple[int, str, List[str]]:
    reasons, is_warning_condition_met = [], False
    if semester_number == 1 and sgpa < 0.80: is_warning_condition_met = True; reasons.append(f"SGPA h·ªçc k·ª≥ 1 ({sgpa:.2f}) < 0.80")
    elif semester_number > 1 and sgpa < 1.00: is_warning_condition_met = True; reasons.append(f"SGPA ({sgpa:.2f}) < 1.00")
    if cumulative_f_credits > 24: is_warning_condition_met = True; reasons.append(f"T·ªïng t√≠n ch·ªâ n·ª£ ({cumulative_f_credits:.1f}) > 24")
    
    current_warning_level = 0
    if is_warning_condition_met:
        if previous_warning_level == 2: current_warning_level = 3
        elif previous_warning_level == 1: current_warning_level = 2
        else: current_warning_level = 1
    # N·∫øu kh√¥ng vi ph·∫°m, m·ª©c c·∫£nh b√°o s·∫Ω l√† 0 (ƒë√£ ƒë∆∞·ª£c reset ·ªü d√≤ng tr√™n)
    
    if current_warning_level > 0: return current_warning_level, f"C·∫£nh b√°o h·ªçc t·∫≠p M·ª©c {current_warning_level}", reasons
    return 0, "ƒê·∫°t y√™u c·∫ßu", []

def calculate_progress(all_sems_data: List[pd.DataFrame], requirements: Dict, grade_map: Dict):
    if not any(not df.empty for df in all_sems_data): return pd.DataFrame()
    master_df = pd.concat(all_sems_data, ignore_index=True)
    if 1.50 <= gpa < 2.00: return "Trung b√¨nh y·∫øu"
    if 1.00 <= gpa < 1.50: return "Y·∫øu"
    return "K√©m"

# N√ÇNG C·∫§P: C√°c h√†m g·ª£i √Ω h·ªçc t·∫≠p
def get_unregistered_courses(all_sems_data, full_curriculum_df):
    if not all_sems_data or full_curriculum_df.empty: return pd.DataFrame()
    taken_courses = set(pd.concat(all_sems_data)["Course"])
    unregistered_df = full_curriculum_df[~full_curriculum_df["Course"].isin(taken_courses)]
    return unregistered_df.reset_index(drop=True)
def get_courses_for_improvement(all_sems_data, grade_map):
    if not any(not df.empty for df in all_sems_data): return pd.DataFrame()
    master_df = pd.concat(all_sems_data, ignore_index=True)
    master_df['Points'] = master_df['Grade'].map(grade_map)
    # T√¨m ƒëi·ªÉm cao nh·∫•t cho m·ªói m√¥n h·ªçc
    best_grades_df = master_df.loc[master_df.groupby('Course')['Points'].idxmax()]
    # L·ªçc ra nh·ªØng m√¥n c√≥ ƒëi·ªÉm D
    d_grade = 'D'
    improve_df = best_grades_df[best_grades_df['Grade'] == d_grade]
    return improve_df[['Course', 'Credits', 'Grade', 'Category']].reset_index(drop=True)

class PDF(FPDF):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
if "sems" not in st.session_state: on_major_change()
GRADUATION_REQUIREMENTS_CURRENT = MAJORS_DATA[selected_major]['graduation_requirements']
DEFAULT_COURSE_CATEGORIES_CURRENT = MAJORS_DATA[selected_major]['course_categories']
FULL_CURRICULUM_DF = pd.DataFrame(MAJORS_DATA[selected_major]['full_curriculum'])
if upload is not None and not st.session_state.get('file_processed', False):
    try:
        df_up = pd.read_csv(upload, encoding='utf-8')
            else:
                st.metric("K·∫øt qu·∫£ XLHV d·ª± ki·∫øn:", f"M·ª©c {auto_warning_level}" if auto_warning_level > 0 else "Kh√¥ng", delta="D·ª±a tr√™n ƒëi·ªÉm k·ª≥ n√†y", delta_color="off")
            manual_warning_options = ["Kh√¥ng", "M·ª©c 1", "M·ª©c 2", "M·ª©c 3", "X√≥a t√™n kh·ªèi danh s√°ch"]
            selected_warning_str = st.selectbox("X·ª≠ l√Ω h·ªçc v·ª• (ch√≠nh th·ª©c):", options=manual_warning_options, index=manual_warning_options.index(st.session_state.manual_warnings[i]), key=f"manual_warning_{i}")
            selected_warning_str = st.selectbox("X·ª≠ l√Ω h·ªçc v·ª• (ch√≠nh th·ª©c):", options=manual_warning_options, index=WARNING_STR_TO_LEVEL[st.session_state.manual_warnings[i]] if st.session_state.manual_warnings[i] in WARNING_STR_TO_LEVEL else 0, key=f"manual_warning_{i}")
            st.session_state.manual_warnings[i] = selected_warning_str
            final_warning_level = WARNING_STR_TO_LEVEL[selected_warning_str]
            warning_history.append({"H·ªçc k·ª≥": i + 1, "M·ª©c C·∫£nh b√°o": final_warning_level, "L√Ω do": ", ".join(auto_reasons) if auto_reasons else "Kh√¥ng c√≥"})
    with colB: st.metric("üìö T·ªïng t√≠n ch·ªâ ƒë√£ qua", f"{total_passed_credits:.2f}")
    with colC: st.metric("üßë‚Äçüéì Tr√¨nh ƒë·ªô sinh vi√™n", get_student_level(total_passed_credits))
    with colD: st.metric("üèÜ X·∫øp lo·∫°i h·ªçc l·ª±c", get_gpa_ranking(cgpa))
    
    st.subheader("üí° G·ª£i √Ω h·ªçc t·∫≠p")
    g1, g2 = st.columns(2)
    with g1:
        with st.expander("üìö C√°c m√¥n ch∆∞a ƒëƒÉng k√Ω h·ªçc"):
            unregistered = get_unregistered_courses(st.session_state.sems, FULL_CURRICULUM_DF)
            if not unregistered.empty:
                st.dataframe(unregistered, use_container_width=True, hide_index=True)
            else:
                st.success("Ch√∫c m·ª´ng! B·∫°n ƒë√£ h·ªçc t·∫•t c·∫£ c√°c m√¥n trong ch∆∞∆°ng tr√¨nh.")
    with g2:
        with st.expander("üéØ C√°c m√¥n c√≥ th·ªÉ h·ªçc c·∫£i thi·ªán (ƒêi·ªÉm D)"):
            improve = get_courses_for_improvement(st.session_state.sems, grade_map)
            if not improve.empty:
                st.dataframe(improve, use_container_width=True, hide_index=True)
            else:
                st.success("Tuy·ªát v·ªùi! Kh√¥ng c√≥ m√¥n n√†o c·∫ßn h·ªçc c·∫£i thi·ªán.")
    
    chart_col, _ = st.columns([1, 1])
    with chart_col:
        st.subheader("Xu h∆∞·ªõng GPA theo h·ªçc k·ª≥")
        st.subheader("üìà Xu h∆∞·ªõng GPA theo h·ªçc k·ª≥")
        if per_sem_gpa and all(c >= 0 for c in per_sem_cred):
            try:
                fig, ax = plt.subplots(); x = np.arange(1, len(per_sem_gpa) + 1)
                ax.plot(x, per_sem_gpa, marker="o", linestyle="-", color='b')
                ax.set_xlabel("H·ªçc k·ª≥"); ax.set_ylabel("GPA (SGPA)"); ax.set_title("Bi·ªÉu ƒë·ªì GPA c√°c h·ªçc k·ª≥")
                ax.set_xticks(x); ax.grid(True, linestyle=":", linewidth=0.5)
                ax.set_ylim(bottom=0, top=max(4.1, max(per_sem_gpa) * 1.1 if per_sem_gpa and any(v > 0 for v in per_sem_gpa) else 4.1))
                st.pyplot(fig, use_container_width=True)
            except Exception: st.info("Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")

with tab2:
    st.header("B·∫£ng ƒëi·ªÉm T·ªïng h·ª£p theo H·ªçc k·ª≥ v√† NƒÉm h·ªçc")
    summary_data, cumulative_credits, cumulative_qp = [], 0.0, 0.0
    year_map = {1: "th·ª© nh·∫•t", 2: "th·ª© hai", 3: "th·ª© ba", 4: "th·ª© t∆∞", 5: "th·ª© nƒÉm"}
    for i in range(len(st.session_state.sems)):
        sem_df = st.session_state.sems[i]
        sem_gpa = per_sem_gpa[i]
        passed_df = sem_df[~sem_df['Grade'].isin(fail_grades)]
        passed_credits = pd.to_numeric(passed_df['Credits'], errors='coerce').fillna(0).sum()
        sem_qp = calc_gpa(passed_df, grade_map) * passed_credits
        cumulative_credits += passed_credits; cumulative_qp += sem_qp
        cumulative_gpa = (cumulative_qp / cumulative_credits) if cumulative_credits > 0 else 0.0
        summary_data.append({"H·ªçc k·ª≥": f"H·ªçc k·ª≥ {i + 1}", "TBC H·ªá 4 (SGPA)": f"{sem_gpa:.2f}", "TBTL H·ªá 4 (CGPA)": f"{cumulative_gpa:.2f}", "S·ªë TC ƒê·∫°t": int(passed_credits), "S·ªë TCTL ƒê·∫°t": int(cumulative_credits)})
        if (i + 1) % 2 == 0:
            year_number = (i // 2) + 1; year_text = year_map.get(year_number, f"th·ª© {year_number}"); year_str = f"NƒÉm {year_text}"
            summary_data.append({"H·ªçc k·ª≥": f"**{year_str}**", "TBC H·ªá 4 (SGPA)": "", "TBTL H·ªá 4 (CGPA)": f"**{cumulative_gpa:.2f}**", "S·ªë TC ƒê·∫°t": f"**{int(per_sem_cred[i] + per_sem_cred[i-1])}**", "S·ªë TCTL ƒê·∫°t": f"**{int(cumulative_credits)}**"})
    st.dataframe(pd.DataFrame(summary_data), use_container_width=True, hide_index=True)
if st.session_state.get('pdf_generated', False):
    student_info_dict = {"H·ªç v√† t√™n": st.session_state.sv_hoten, "M√£ SV": st.session_state.sv_mssv, "L·ªõp": st.session_state.sv_lop, "Ng√†nh h·ªçc": selected_major}
    summary_df_pdf = pd.DataFrame(summary_data)
    total_summary_dict = {"GPA T√≠ch l≈©y (CGPA)": f"{cgpa:.3f}", "T·ªïng t√≠n ch·ªâ ƒë√£ qua": f"{total_passed_credits:.2f}", "Tr√¨nh ƒë·ªô sinh vi√™n": get_student_level(total_passed_credits), "X·∫øp lo·∫°i h·ªçc l·ª±c": get_gpa_ranking(cgpa)}
    pdf_data = generate_pdf_report(student_info_dict, summary_df_pdf, st.session_state.sems, total_summary_dict)
    st.sidebar.download_button(label="T·∫£i v·ªÅ B√°o c√°o PDF", data=pdf_data, file_name=f"Bao_cao_hoc_tap_{st.session_state.sv_mssv}.pdf", mime="application/pdf", use_container_width=True)
    st.session_state.pdf_generated = False
with st.expander("üìú C√°ch t√≠nh & L·ªãch s·ª≠ x·ª≠ l√Ω h·ªçc v·ª•"):
    def style_warning_html(level):
        if level == 0: return f'<p style="color: green; margin:0;">Kh√¥ng</p>'
        if level == 1: return f'<p style="color: orange; font-weight: bold; margin:0;">M·ª©c {level}</p>'
        if level == 2 or level == 3: return f'<p style="color: red; font-weight: bold; margin:0;">M·ª©c {level}</p>'
        if level == 4: return f'<p style="color: #A30000; font-weight: bold; margin:0;">X√≥a t√™n</p>'
    display_df = pd.DataFrame(warning_history)
    display_df["M·ª©c X·ª≠ l√Ω"] = display_df["M·ª©c C·∫£nh b√°o"].apply(style_warning_html)
    display_df = display_df.rename(columns={"H·ªçc k·ª≥": "<b>H·ªçc k·ª≥</b>", "M·ª©c X·ª≠ l√Ω": "<b>M·ª©c X·ª≠ l√Ω</b>", "L√Ω do": "<b>L√Ω do (g·ª£i √Ω)</b>"})
    st.markdown(display_df[["<b>H·ªçc k·ª≥</b>", "<b>M·ª©c X·ª≠ l√Ω</b>", "<b>L√Ω do (g·ª£i √Ω)</b>"]].to_html(escape=False, index=False), unsafe_allow_html=True)
with st.expander("‚ùì H∆∞·ªõng d·∫´n"):
    st.markdown("""- **Nh·∫≠p/Xu·∫•t file:** File CSV ph·∫£i c√≥ c√°c c·ªôt: `Course`, `Credits`, `Grade`, `Semester`, `Category`.\n- **Th√™m/x√≥a m√¥n h·ªçc:** D√πng n√∫t `+` ƒë·ªÉ th√™m v√† tick v√†o √¥ "X√≥a" r·ªìi nh·∫•n n√∫t "üóëÔ∏è X√≥a m√¥n ƒë√£ ch·ªçn" ƒë·ªÉ x√≥a.\n- **X·ª≠ l√Ω h·ªçc v·ª•:** Ch·ªçn m·ª©c x·ª≠ l√Ω ch√≠nh th·ª©c c·ªßa nh√† tr∆∞·ªùng t·∫°i m·ªói h·ªçc k·ª≥. K·∫øt qu·∫£ n√†y s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ t√≠nh to√°n m·ª©c c·∫£nh b√°o d·ª± ki·∫øn cho h·ªçc k·ª≥ ti·∫øp theo.""")
