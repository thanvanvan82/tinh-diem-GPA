import streamlit as st
import pandas as pd
from typing import Dict, List, Tuple
import matplotlib.pyplot as plt
import numpy as np

st.set_page_config(page_title="H·ªá th·ªëng T∆∞ v·∫•n H·ªçc t·∫≠p", page_icon="üéì", layout="wide")

# -----------------------------
# D·ªÆ LI·ªÜU C·∫§U H√åNH & H·∫∞NG S·ªê
# -----------------------------

# N√ÇNG C·∫§P: C·∫•u tr√∫c d·ªØ li·ªáu trung t√¢m cho nhi·ªÅu ng√†nh h·ªçc
# ƒê·ªÉ th√™m ng√†nh m·ªõi, ch·ªâ c·∫ßn sao ch√©p c·∫•u tr√∫c c·ªßa m·ªôt ng√†nh v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu.
MAJORS_DATA = {
    "C√¥ng ngh·ªá k·ªπ thu·∫≠t x√¢y d·ª±ng": {
        "student_info": "2151113235 - Nguy·ªÖn ƒê√¨nh Mai Nam - 63CT2 - C√¥ng ngh·ªá k·ªπ thu·∫≠t x√¢y d·ª±ng",
        "course_categories": [
            "L√Ω lu·∫≠n ch√≠nh tr·ªã", "K·ªπ nƒÉng", "Ngo·∫°i ng·ªØ", "Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc",
            "Gi√°o d·ª•c qu·ªëc ph√≤ng an ninh", "Gi√°o d·ª•c th·ªÉ ch·∫•t", "Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh",
            "Ki·∫øn th·ª©c c∆° s·ªü ng√†nh", "Ki·∫øn th·ª©c ng√†nh", "Ki·∫øn th·ª©c t·ª± ch·ªçn",
            "Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp", "M√¥n h·ªçc ƒëi·ªÅu ki·ªán", "Chu·∫©n ƒë·∫ßu ra"
        ],
        "graduation_requirements": {
            "L√Ω lu·∫≠n ch√≠nh tr·ªã": 13, "K·ªπ nƒÉng": 3, "Ngo·∫°i ng·ªØ": 6, "Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc": 21,
            "Gi√°o d·ª•c qu·ªëc ph√≤ng an ninh": 11, "Gi√°o d·ª•c th·ªÉ ch·∫•t": 34, "Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh": 31,
            "Ki·∫øn th·ª©c c∆° s·ªü ng√†nh": 22, "Ki·∫øn th·ª©c ng√†nh": 39, "Ki·∫øn th·ª©c t·ª± ch·ªçn": 27,
            "Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp": 13,
        },
        "preloaded_data": [
            # D·ªØ li·ªáu ƒëi·ªÉm c·ªßa sinh vi√™n Nguy·ªÖn ƒê√¨nh Mai Nam ƒë∆∞·ª£c ƒë·∫∑t ·ªü ƒë√¢y
            {'Course': 'B√≥ng chuy·ªÅn 1', 'Credits': 1, 'Grade': 'D', 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t', 'Semester': 1},
            {'Course': 'B√≥ng chuy·ªÅn 2', 'Credits': 1, 'Grade': 'C', 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t', 'Semester': 1},
            {'Course': 'B√≥ng r·ªï', 'Credits': 1, 'Grade': 'B', 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t', 'Semester': 1},
            {'Course': 'H√≥a h·ªçc ƒë·∫°i c∆∞∆°ng', 'Credits': 3, 'Grade': 'D', 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc', 'Semester': 1},
            {'Course': 'C·∫ßu l√¥ng', 'Credits': 1, 'Grade': 'C', 'Category': 'Gi√°o d·ª•c th·ªÉ ch·∫•t', 'Semester': 1},
            {'Course': 'Tin h·ªçc c∆° b·∫£n', 'Credits': 2, 'Grade': 'B', 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc', 'Semester': 1},
            {'Course': 'Gi·∫£i t√≠ch h√†m m·ªôt bi·∫øn', 'Credits': 3, 'Grade': 'C', 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc', 'Semester': 1},
            {'Course': 'K·ªπ nƒÉng m·ªÅm v√† tinh th·∫ßn kh·ªüi nghi·ªáp', 'Credits': 3, 'Grade': 'B', 'Category': 'K·ªπ nƒÉng', 'Semester': 1},
            {'Course': 'S·ª©c b·ªÅn v·∫≠t li·ªáu 1', 'Credits': 3, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh', 'Semester': 2},
            {'Course': 'V·∫≠t li·ªáu x√¢y d·ª±ng', 'Credits': 3, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh', 'Semester': 2},
            {'Course': 'S·ª©c b·ªÅn v·∫≠t li·ªáu 2', 'Credits': 2, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh', 'Semester': 2},
            {'Course': 'Ti·∫øng Anh 1', 'Credits': 3, 'Grade': 'C', 'Category': 'Ngo·∫°i ng·ªØ', 'Semester': 2},
            {'Course': 'C∆° h·ªçc ch·∫•t l·ªèng', 'Credits': 3, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh', 'Semester': 2},
            {'Course': 'Ph√°p lu·∫≠t ƒë·∫°i c∆∞∆°ng', 'Credits': 2, 'Grade': 'C', 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã', 'Semester': 2},
            {'Course': 'ƒê·ªãa ch·∫•t c√¥ng tr√¨nh', 'Credits': 2, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh', 'Semester': 2},
            {'Course': 'Tri·∫øt h·ªçc M√°c - L√™nin', 'Credits': 3, 'Grade': 'D', 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã', 'Semester': 2},
            {'Course': 'V·∫≠t l√Ω 2', 'Credits': 3, 'Grade': 'C', 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc', 'Semester': 3},
            {'Course': 'ƒê·ªì h·ªça k·ªπ thu·∫≠t 1', 'Credits': 2, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh', 'Semester': 3},
            {'Course': 'ƒê·ªì h·ªça k·ªπ thu·∫≠t 2', 'Credits': 2, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh', 'Semester': 3},
            {'Course': 'K·ªπ thu·∫≠t ƒëi·ªán', 'Credits': 3, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh', 'Semester': 3},
            {'Course': 'N·ªÅn m√≥ng', 'Credits': 2, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 3},
            {'Course': 'C∆° h·ªçc ƒë·∫•t', 'Credits': 3, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 3},
            {'Course': 'T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh', 'Credits': 2, 'Grade': 'D', 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã', 'Semester': 3},
            {'Course': 'Th·ªßy l·ª±c c√¥ng tr√¨nh', 'Credits': 3, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 4},
            {'Course': 'Th·ªßy vƒÉn c√¥ng tr√¨nh', 'Credits': 3, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 4},
            {'Course': 'Gi·∫£i t√≠ch h√†m nhi·ªÅu bi·∫øn', 'Credits': 3, 'Grade': 'C', 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc', 'Semester': 4},
            {'Course': 'Kinh t·∫ø ch√≠nh tr·ªã M√°c - L√™nin', 'Credits': 2, 'Grade': 'C', 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã', 'Semester': 4},
            {'Course': 'Nh·∫≠p m√¥n ng√†nh C√¥ng ngh·ªá k·ªπ thu·∫≠t x√¢y d·ª±ng', 'Credits': 2, 'Grade': 'A', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh', 'Semester': 4},
            {'Course': 'Ch·ªß nghƒ©a x√£ h·ªôi khoa h·ªçc', 'Credits': 2, 'Grade': 'D', 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã', 'Semester': 4},
            {'Course': 'Th·ªëng k√™ trong k·ªπ thu·∫≠t', 'Credits': 2, 'Grade': 'C', 'Category': 'Khoa h·ªçc t·ª± nhi√™n v√† tin h·ªçc', 'Semester': 4},
            {'Course': 'Tr·∫Øc ƒë·ªãa', 'Credits': 2, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh', 'Semester': 5},
            {'Course': 'Th·ª±c t·∫≠p tr·∫Øc ƒë·ªãa', 'Credits': 1, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh', 'Semester': 5},
            {'Course': 'Kinh t·∫ø x√¢y d·ª±ng 1', 'Credits': 2, 'Grade': 'B', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 5},
            {'Course': 'C∆° s·ªü thi·∫øt k·∫ø c√¥ng tr√¨nh d√¢n d·ª•ng v√† c√¥ng nghi·ªáp', 'Credits': 2, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 5},
            {'Course': '·ª®ng d·ª•ng BIM trong x√¢y d·ª±ng', 'Credits': 2, 'Grade': 'B', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 5},
            {'Course': 'C√¥ng ngh·ªá x√¢y d·ª±ng c√¥ng tr√¨nh b√™ t√¥ng', 'Credits': 2, 'Grade': 'B', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 5},
            {'Course': 'C√¥ng ngh·ªá x√¢y d·ª±ng c√¥ng tr√¨nh ƒë·∫•t ƒë√°', 'Credits': 2, 'Grade': 'B', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 6},
            {'Course': 'C√¥ng ngh·ªá x·ª≠ l√Ω n·ªÅn m√≥ng', 'Credits': 2, 'Grade': 'B', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 6},
            {'Course': 'Qu·∫£n l√Ω ƒë·∫ßu t∆∞ x√¢y d·ª±ng', 'Credits': 3, 'Grade': 'B', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 6},
            {'Course': 'An to√†n x√¢y d·ª±ng', 'Credits': 2, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 6},
            {'Course': 'T·ªï ch·ª©c x√¢y d·ª±ng', 'Credits': 2, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 6},
            {'Course': 'Thi c√¥ng c√¥ng tr√¨nh ng·∫ßm', 'Credits': 2, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 6},
            {'Course': 'L·ªãch s·ª≠ ƒê·∫£ng C·ªông s·∫£n Vi·ªát Nam', 'Credits': 2, 'Grade': 'D', 'Category': 'L√Ω lu·∫≠n ch√≠nh tr·ªã', 'Semester': 7},
            {'Course': 'M√°y x√¢y d·ª±ng', 'Credits': 3, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 7},
            {'Course': 'Gi·ªõi thi·ªáu v√† c∆° s·ªü thi·∫øt k·∫ø c√¥ng tr√¨nh th·ªßy', 'Credits': 2, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 7},
            {'Course': 'Thi·∫øt k·∫ø c√¥ng tr√¨nh c·∫ßu ƒë∆∞·ªùng', 'Credits': 3, 'Grade': 'D', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 7},
            {'Course': 'Thi·∫øt k·∫ø ƒë√™ v√† c√¥ng tr√¨nh b·∫£o v·ªá b·ªù s√¥ng', 'Credits': 2, 'Grade': 'A', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 7},
            {'Course': 'Th·ª±c t·∫≠p ƒë·ªãa ch·∫•t c√¥ng tr√¨nh', 'Credits': 1, 'Grade': 'C', 'Category': 'Ki·∫øn th·ª©c c∆° s·ªü kh·ªëi ng√†nh', 'Semester': 7},
            {'Course': 'Th·ª±c t·∫≠p k·ªπ thu·∫≠t v√† t·ªï ch·ª©c x√¢y d·ª±ng', 'Credits': 3, 'Grade': 'A', 'Category': 'Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp', 'Semester': 8},
            {'Course': 'ƒê·ªì √°n t·ªï ch·ª©c x√¢y d·ª±ng', 'Credits': 1, 'Grade': 'A', 'Category': 'Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp', 'Semester': 8},
            {'Course': 'ƒê·ªì √°n c√¥ng ngh·ªá x√¢y d·ª±ng c√¥ng tr√¨nh b√™ t√¥ng', 'Credits': 1, 'Grade': 'B', 'Category': 'Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp', 'Semester': 8},
            {'Course': 'ƒê·ªì √°n c√¥ng ngh·ªá x√¢y d·ª±ng c√¥ng tr√¨nh ƒë·∫•t ƒë√°', 'Credits': 1, 'Grade': 'B', 'Category': 'Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp', 'Semester': 8},
            {'Course': 'D·∫´n d√≤ng thi c√¥ng v√† c√¥ng t√°c h·ªë m√≥ng', 'Credits': 2, 'Grade': 'B', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 8},
            {'Course': 'ƒê·ªì √°n d·∫´n d√≤ng thi c√¥ng v√† c√¥ng t√°c h·ªë m√≥ng', 'Credits': 1, 'Grade': 'B', 'Category': 'Th·ª±c t·∫≠p v√† h·ªçc ph·∫ßn t·ªët nghi·ªáp', 'Semester': 8},
            {'Course': 'Gi√°m s√°t ch·∫•t l∆∞·ª£ng c√¥ng tr√¨nh', 'Credits': 3, 'Grade': 'B', 'Category': 'Ki·∫øn th·ª©c ng√†nh', 'Semester': 8},
        ]
    },
    "Qu·∫£n l√Ω x√¢y d·ª±ng": {
        "student_info": "Nh·∫≠p th√¥ng tin sinh vi√™n ng√†nh Qu·∫£n l√Ω x√¢y d·ª±ng",
        "course_categories": ["Kinh t·∫ø", "Lu·∫≠t", "Qu·∫£n l√Ω d·ª± √°n", "K·ªπ thu·∫≠t c∆° s·ªü"], # V√≠ d·ª•
        "graduation_requirements": { # D·ªØ li·ªáu m·∫´u, c·∫ßn thay th·∫ø
            "Kinh t·∫ø": 40, "Lu·∫≠t": 20, "Qu·∫£n l√Ω d·ª± √°n": 50, "K·ªπ thu·∫≠t c∆° s·ªü": 40,
        },
        "preloaded_data": [ # D·ªØ li·ªáu m·∫´u, c·∫ßn thay th·∫ø
            {'Course': 'Kinh t·∫ø vi m√¥', 'Credits': 3, 'Grade': 'A', 'Category': 'Kinh t·∫ø', 'Semester': 1},
            {'Course': 'Lu·∫≠t x√¢y d·ª±ng', 'Credits': 2, 'Grade': 'B', 'Category': 'Lu·∫≠t', 'Semester': 1},
        ]
    }
}

# T√≠nh to√°n c√°c gi√° tr·ªã t·ªïng
for major in MAJORS_DATA:
    total_required = sum(MAJORS_DATA[major]["graduation_requirements"].values())
    MAJORS_DATA[major]["graduation_requirements"]["T·ªïng t√≠n ch·ªâ t√≠ch l≈©y"] = total_required

PRESET_SCALES: Dict[str, Dict[str, float]] = {
    "VN 4.0 (TLU)": {"A": 4.0, "B": 3.0, "C": 2.0, "D": 1.0, "F": 0.0},
}
# -----------------------------
# C√ÅC H√ÄM TI·ªÜN √çCH (Gi·ªØ nguy√™n)
# -----------------------------
# ... (C√°c h√†m calc_gpa, check_academic_warning, calculate_progress, to_csv gi·ªØ nguy√™n)
@st.cache_data
def to_csv(df: pd.DataFrame) -> bytes:
    return df.to_csv(index=False).encode("utf-8")
def calc_gpa(df: pd.DataFrame, grade_map: Dict[str, float]) -> float:
    if df.empty: return 0.0
    work = df.copy()
    fail_grades = [grade for grade, point in grade_map.items() if point == 0.0]
    work_passed = work[~work["Grade"].isin(fail_grades)]
    if work_passed.empty: return 0.0
    work_passed["Points"] = work_passed["Grade"].map(grade_map).fillna(0.0)
    work_passed["QP"] = work_passed["Points"] * pd.to_numeric(work_passed["Credits"], errors="coerce").fillna(0.0)
    total_credits = pd.to_numeric(work_passed["Credits"], errors="coerce").fillna(0.0).sum()
    if total_credits <= 0: return 0.0
    return (work_passed["QP"].sum()) / total_credits
def check_academic_warning(semester_number: int, sgpa: float, cumulative_f_credits: float, previous_warning_level: int) -> Tuple[int, str, List[str]]:
    reasons, is_warning_condition_met = [], False
    if semester_number == 1 and sgpa < 0.80: is_warning_condition_met = True; reasons.append(f"SGPA h·ªçc k·ª≥ 1 ({sgpa:.2f}) < 0.80")
    elif semester_number > 1 and sgpa < 1.00: is_warning_condition_met = True; reasons.append(f"SGPA ({sgpa:.2f}) < 1.00")
    if cumulative_f_credits > 24: is_warning_condition_met = True; reasons.append(f"T·ªïng t√≠n ch·ªâ n·ª£ ({cumulative_f_credits}) > 24")
    current_warning_level = 0
    if is_warning_condition_met: current_warning_level = min(previous_warning_level + 1, 3)
    if current_warning_level > 0: return current_warning_level, f"C·∫£nh b√°o h·ªçc t·∫≠p M·ª©c {current_warning_level}", reasons
    return 0, "ƒê·∫°t y√™u c·∫ßu", []
def calculate_progress(all_sems_data: List[pd.DataFrame], requirements: Dict, grade_map: Dict):
    if not any(not df.empty for df in all_sems_data): return pd.DataFrame()
    master_df = pd.concat(all_sems_data, ignore_index=True)
    fail_grades = [grade for grade, point in grade_map.items() if point == 0.0]
    passed_df = master_df[~master_df["Grade"].isin(fail_grades)].copy()
    passed_df["Credits"] = pd.to_numeric(passed_df["Credits"], errors="coerce").fillna(0.0)
    progress_data = []
    total_completed = passed_df["Credits"].sum()
    total_required = requirements.get("T·ªïng t√≠n ch·ªâ t√≠ch l≈©y", 1)
    progress_data.append({"Y√™u c·∫ßu": "T·ªïng t√≠n ch·ªâ", "ƒê√£ ho√†n th√†nh": total_completed, "Y√™u c·∫ßu": total_required})
    category_credits = passed_df.groupby("Category")["Credits"].sum()
    for category_name, required in requirements.items():
        if category_name == "T·ªïng t√≠n ch·ªâ t√≠ch l≈©y": continue
        completed = category_credits.get(category_name, 0.0)
        progress_data.append({"Y√™u c·∫ßu": category_name, "ƒê√£ ho√†n th√†nh": completed, "Y√™u c·∫ßu": required})
    df = pd.DataFrame(progress_data)
    df["C√≤n l·∫°i"] = (df["Y√™u c·∫ßu"] - df["ƒê√£ ho√†n th√†nh"]).clip(lower=0)
    df["Ti·∫øn ƒë·ªô"] = (df["ƒê√£ ho√†n th√†nh"] / df["Y√™u c·∫ßu"]).clip(0, 1) if df["Y√™u c·∫ßu"].all() > 0 else 0
    return df
def get_preloaded_sems_from_major(major_name):
    data = MAJORS_DATA[major_name].get("preloaded_data", [])
    if not data: return [], 1
    df = pd.DataFrame(data)
    max_sem = df["Semester"].max() if "Semester" in df.columns and not df.empty else 1
    sems = []
    for i in range(1, int(max_sem) + 1):
        sem_df = df[df["Semester"] == i][["Course", "Credits", "Grade", "Category"]].reset_index(drop=True)
        sems.append(sem_df if not sem_df.empty else pd.DataFrame(columns=["Course", "Credits", "Grade", "Category"]))
    return sems, int(max_sem)

# -----------------------------
# SIDEBAR
# -----------------------------
st.sidebar.title("‚öôÔ∏è C√†i ƒë·∫∑t")
scale_name = st.sidebar.selectbox("Thang ƒëi·ªÉm", list(PRESET_SCALES.keys()), index=0)
grade_map = PRESET_SCALES[scale_name]
st.sidebar.divider()
st.sidebar.subheader("üìÅ Nh·∫≠p / Xu·∫•t File")
if st.sidebar.button("‚¨áÔ∏è Xu·∫•t to√†n b·ªô d·ªØ li·ªáu (CSV)"):
    all_dfs = []
    for i, df in enumerate(st.session_state.get("sems", [])):
        df_copy = df.copy(); df_copy["Semester"] = i + 1; all_dfs.append(df_copy)
    if any(not df.empty for df in all_dfs):
        master_df = pd.concat(all_dfs, ignore_index=True)
        st.sidebar.download_button(label="T·∫£i v·ªÅ file t·ªïng h·ª£p", data=to_csv(master_df), file_name="GPA_data_all_semesters.csv", mime="text/csv", use_container_width=True)
    else: st.sidebar.warning("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")
def on_file_upload(): st.session_state.file_processed = False
upload = st.sidebar.file_uploader("Nh·∫≠p file CSV (c√≥ c·ªôt Semester, Category)", type=["csv"], key="uploader", on_change=on_file_upload)

# -----------------------------
# GIAO DI·ªÜN CH√çNH
# -----------------------------
st.title("üéì H·ªá th·ªëng T∆∞ v·∫•n H·ªçc t·∫≠p")

def on_major_change():
    major = st.session_state.major_selector
    sems, max_sem = get_preloaded_sems_from_major(major)
    st.session_state.sems = sems
    st.session_state.n_sem_input = max_sem

selected_major = st.selectbox(
    "Ch·ªçn ng√†nh h·ªçc:",
    options=list(MAJORS_DATA.keys()),
    key="major_selector",
    on_change=on_major_change
)

if "sems" not in st.session_state:
    on_major_change()

st.markdown(f"`{MAJORS_DATA[selected_major]['student_info']}`")
GRADUATION_REQUIREMENTS_CURRENT = MAJORS_DATA[selected_major]['graduation_requirements']
DEFAULT_COURSE_CATEGORIES_CURRENT = MAJORS_DATA[selected_major]['course_categories']

# Logic x·ª≠ l√Ω file upload
if upload is not None and not st.session_state.get('file_processed', False):
    try:
        df_up = pd.read_csv(upload, encoding='utf-8')
        needed = {"Course", "Credits", "Grade", "Semester", "Category"}
        if not needed.issubset(df_up.columns): st.warning("File CSV ph·∫£i c√≥ c√°c c·ªôt: Course, Credits, Grade, Semester, Category")
        else:
            df_up["Semester"] = pd.to_numeric(df_up["Semester"], errors="coerce").fillna(1).astype(int)
            max_sem = df_up["Semester"].max()
            st.session_state.n_sem_input = max_sem
            new_sems = [df_up[df_up["Semester"] == i][["Course", "Credits", "Grade", "Category"]].reset_index(drop=True) for i in range(1, max_sem + 1)]
            st.session_state.sems = new_sems
            st.session_state.file_processed = True
            st.success(f"ƒê√£ nh·∫≠p v√† ph√¢n b·ªï d·ªØ li·ªáu cho {max_sem} h·ªçc k·ª≥.")
            st.rerun()
    except Exception as e: st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file CSV: {e}"); st.session_state.file_processed = True

tab1, tab2 = st.tabs(["B·∫£ng ƒëi·ªÉm Chi ti·∫øt", "B·∫£ng ƒëi·ªÉm T·ªïng h·ª£p"])

with tab1:
    st.header("üìä B·∫£ng t·ªïng quan Ti·∫øn ƒë·ªô T·ªët nghi·ªáp")
    progress_df = calculate_progress(st.session_state.sems, GRADUATION_REQUIREMENTS_CURRENT, grade_map)
    if not progress_df.empty:
        total_progress = progress_df.iloc[0]
        st.subheader(f"T·ªïng quan: {total_progress['ƒê√£ ho√†n th√†nh']:.0f} / {total_progress['Y√™u c·∫ßu']:.0f} t√≠n ch·ªâ ƒë√£ t√≠ch l≈©y")
        st.progress(total_progress['Ti·∫øn ƒë·ªô'], text=f"{total_progress['Ti·∫øn ƒë·ªô']:.1%}")
        st.markdown("---")
        detail_df = progress_df[progress_df['Y√™u c·∫ßu'] > 0].iloc[1:].reset_index(drop=True)
        if not detail_df.empty:
            st.subheader("Chi ti·∫øt theo kh·ªëi ki·∫øn th·ª©c")
            left_col, right_col = st.columns(2)
            for i, row in detail_df.iterrows():
                target_col = left_col if i % 2 == 0
